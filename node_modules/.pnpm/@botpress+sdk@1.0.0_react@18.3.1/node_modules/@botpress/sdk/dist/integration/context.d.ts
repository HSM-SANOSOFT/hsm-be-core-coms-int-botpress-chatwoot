import { z } from '@bpinternal/zui';
import { ValueOf } from '../utils/type-utils';
import { BaseIntegration } from './generic';
export declare const integrationOperationSchema: import("@bpinternal/zui").ZodEnum<["webhook_received", "message_created", "action_triggered", "register", "unregister", "ping", "create_user", "create_conversation"]>;
export type IntegrationOperation = z.infer<typeof integrationOperationSchema>;
type IntegrationContextConfig<TIntegration extends BaseIntegration> = {
    configurationType: null;
    configuration: TIntegration['configuration'];
} | ValueOf<{
    [TConfigType in keyof TIntegration['configurations']]: {
        configurationType: TConfigType;
        configuration: TIntegration['configurations'][TConfigType];
    };
}>;
export type IntegrationContext<TIntegration extends BaseIntegration = BaseIntegration> = {
    botId: string;
    botUserId: string;
    integrationId: string;
    webhookId: string;
    operation: IntegrationOperation;
} & IntegrationContextConfig<TIntegration>;
export declare const extractContext: <TIntegration extends BaseIntegration>(headers: Record<string, string | undefined>) => IntegrationContext<TIntegration>;
export {};
